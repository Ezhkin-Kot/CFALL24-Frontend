@page "/login"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>

                    <div class="form-floating mb-3">
                        <input type="text"
                               class="form-control @(string.IsNullOrEmpty(_login) ? "" : _login.Length < 3 ? "is-invalid" : "is-valid")"
                               id="loginField"
                               placeholder="Enter login"
                               @bind-value="_login"
                               @bind-value:event="oninput"
                               @onkeypress="@(async (e) => await HandleKeyPress(e))" />
                        <label for="loginField">Login</label>
                        @if (!string.IsNullOrEmpty(_login) && _login.Length < 3)
                        {
                            <div class="invalid-feedback">
                                Login must be at least 3 characters
                            </div>
                        }
                    </div>

                    <div class="form-floating mb-3">
                        <input type="password"
                               class="form-control @(string.IsNullOrEmpty(_password) ? "" : _password.Length < 6 ? "is-invalid" : "is-valid")"
                               id="passwordField"
                               placeholder="Enter password"
                               @bind-value="_password"
                               @bind-value:event="oninput"
                               @onkeypress="@(async (e) => await HandleKeyPress(e))" />
                        <label for="passwordField">Password</label>
                        @if (!string.IsNullOrEmpty(_password) && _password.Length < 6)
                        {
                            <div class="invalid-feedback">
                                Password must be at least 6 characters
                            </div>
                        }
                    </div>

                    <button class="btn btn-primary w-100 mb-3"
                            @onclick="LoginUser"
                            disabled="@(_isProcessing || !IsValid)">
                        @if (_isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>

                    <div class="text-center">
                        Don't have an account?
                        <a href="/registration" class="text-decoration-none">Register here</a>
                    </div>

                    @if (!string.IsNullOrEmpty(_message))
                    {
                        <div class="alert @(_isError ? "alert-danger" : "alert-success") mt-3">
                            @_message
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string _login = "";
    private string _password = "";
    private bool _isProcessing;
    private string _message = "";
    private bool _isError;
    
    private bool IsValid => !string.IsNullOrEmpty(_login) && 
                          _login.Length >= 3 && 
                          !string.IsNullOrEmpty(_password) && 
                          _password.Length >= 6;

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && IsValid && !_isProcessing)
        {
            await LoginUser();
        }
    }

    private async Task LoginUser()
    {
        try
        {
            _isProcessing = true;
            _message = string.Empty;
            _isError = false;
            StateHasChanged();

            if (!IsValid)
            {
                _message = "Please check your input";
                _isError = true;
                return;
            }

            Console.WriteLine($"Attempting to login user: {_login}");
            var success = await AuthUser.LoginUser(_login, _password);
            
            if (success)
            {
                _message = "Login successful! Redirecting...";
                _isError = false;
                StateHasChanged();
                
                // Small delay to show success message
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                _message = "Login failed. Please check your credentials.";
                _isError = true;
            }
        }
        catch (Exception ex)
        {
            _message = "An error occurred during login.";
            _isError = true;
            Console.WriteLine($"Login error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
}
